// Simple localization system (URL param: ?lang=en or ?lang=ru)
// Usage: import { t } from '../core/i18n.js';  t('path.to.key', {var:"value"})

const urlParams = new URLSearchParams(window.location.search);
export const currentLang = (function(){
  const p = (urlParams.get('lang')||'').toLowerCase();
  if(p==='ru'||p==='rus'||p==='ru-ru') return 'ru';
  return 'en';
})();

const dict = {
  en: {
    title: 'Caravan Tycoon',
    btn: {
      buildInn: 'Build Caravanserai (üí∞200)',
      mute: 'Mute',
      unmute: 'Unmute',
      cities: 'Cities',
      strategy: 'Management',
      buyCaravan: '+ Caravan',
      caravanLimit: 'Caravan limit',
      addCamel: 'Add camel'
    },
    section: { strategy: 'Strategy', caravans: 'Caravans' },
    strategy: { good: 'Good', buyLE: 'BUY<=', sellGE: 'SELL>=', range: 'Range' },
    caravan: {
      state: { travel: 'traveling', trade: 'trading', idle: 'idle' },
      addCamelLimit: 'Caravan #{id}: camel limit.',
      addCamelNoMoney: 'Not enough money for camel: need {cost}.',
      addCamelAdded: 'Added camel to caravan #{id}. Now {count}.',
  none: 'No caravans',
  target: 'Target',
  camels: 'Camels',
  filled: 'Filled'
    },
    goods: { spice: 'Spice', cloth: 'Cloth', ore: 'Ore' },
    stats: {
      money: 'Money', level: 'Level', xp: 'XP', totalProfit: 'Total Profit', lastTrade: 'Last Trade', goods: 'Goods store', caravans: 'Caravans', camelsTotal: 'Camels total', camelLimit: 'limit', day: 'Day', paused: 'PAUSED'
    },
    legend: { desert: 'Desert', oasis: 'Oasis', route: 'Route', caravan: 'Caravan', inn: 'Inn', bandits: 'Bandits' },
    tooltip: { price: 'Price', stock: 'Stock', netFlow: 'Net flow', priceRangePct: 'Price % range', axes: 'X axis: time (h) / Y axis: price (global range)' },
  time: { hoursShort: 'h', delta: 'Œî {hours}{unit}' },
    events: {
      stormLost: 'Sandstorm destroyed {loss} goods.',
      fair: 'Random fair brought {bonus}.',
      camelLost: 'Camel of caravan #{id} ran away.',
      banditsSteal: 'Bandits raided camp: stole {loss}.',
      banditsFail: 'Bandits tried to raid but caravans escaped.'
    },
    welcome: 'Welcome to the desert. Begin trading.',
  build: {},
    trade: {
      sold: 'Caravan #{id} sold {qty} {good} in {city} at {price} (profit {profit})',
      profit: 'Profit +{profit}',
      bought: 'Caravan #{id} bought {qty} {good} in {city} at {price}',
      balance: 'Balance {delta}',
      nothing: 'Caravan #{id} did not trade in {city}'
    },
    level: {
      camelLimit: 'Camel limit: {n}',
      caravanLimit: 'Caravan limit: {n}',
      cityUnlocked: 'New city unlocked: {name}',
      goodUnlocked: 'New good unlocked: {name}',
      cityGrew1: 'City grew.',
      cityGrew2: 'Cities are growing.',
      cityGrowth: 'City growth.',
      cityLarge: 'Large city forming.',
      newLevel: 'New level!',
      up: 'Level {n}',
      cityGrewLog: 'City {name} grew ({size}).'
    },
    roles: { PRODUCER:'Producer', CONSUMER:'Consumer', HUB:'Hub', SCARCE:'Scarce' },
  tips: 'Orbit Cam: Mouse drag rotate, Wheel zoom. W/S move forward/back, A/D strafe, Arrows rotate/tilt, Shift = faster. P: pause.'
  },
  ru: {
    title: '–ö–∞—Ä–∞–≤–∞–Ω-–¢–∞–π–∫—É–Ω',
    btn: {
      buildInn: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä–∞–≤–∞–Ω-—Å–∞—Ä–∞–π (üí∞200)',
      mute: '–ó–≤—É–∫ –≤—ã–∫–ª',
      unmute: '–ó–≤—É–∫ –≤–∫–ª',
      cities: '–ì–æ—Ä–æ–¥–∞',
      strategy: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
      buyCaravan: '+ –ö–∞—Ä–∞–≤–∞–Ω',
      caravanLimit: '–õ–∏–º–∏—Ç –∫–∞—Ä–∞–≤–∞–Ω–æ–≤',
      addCamel: '–î–æ–±–∞–≤–∏—Ç—å –≤–µ—Ä–±–ª—é–¥–∞'
    },
    section: { strategy: '–°—Ç—Ä–∞—Ç–µ–≥–∏—è', caravans: '–ö–∞—Ä–∞–≤–∞–Ω—ã' },
    strategy: { good: '–¢–æ–≤–∞—Ä', buyLE: 'BUY<=', sellGE: 'SELL>=', range: '–î–∏–∞–ø–∞–∑–æ–Ω' },
    caravan: {
      state: { travel: '–≤ –ø—É—Ç–∏', trade: '—Ç–æ—Ä–≥—É–µ—Ç', idle: '–æ–∂–∏–¥–∞–µ—Ç' },
      addCamelLimit: '–ö–∞—Ä–∞–≤–∞–Ω #{id}: –ª–∏–º–∏—Ç –≤–µ—Ä–±–ª—é–¥–æ–≤.',
      addCamelNoMoney: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –≤–µ—Ä–±–ª—é–¥–∞: –Ω—É–∂–Ω–æ {cost}.',
      addCamelAdded: '–î–æ–±–∞–≤–ª–µ–Ω –≤–µ—Ä–±–ª—é–¥ –≤ –∫–∞—Ä–∞–≤–∞–Ω #{id}. –¢–µ–ø–µ—Ä—å {count}.',
  none: '–ù–µ—Ç –∫–∞—Ä–∞–≤–∞–Ω–æ–≤',
  target: '–¶–µ–ª—å',
  camels: '–í–µ—Ä–±–ª—é–¥—ã',
  filled: '–ó–∞–ø–æ–ª–Ω'
    },
    goods: { spice: '–ü—Ä—è–Ω–æ—Å—Ç–∏', cloth: '–¢–µ–∫—Å—Ç–∏–ª—å', ore: '–†—É–¥–∞' },
    stats: {
      money: '–î–µ–Ω—å–≥–∏', level: '–£—Ä–æ–≤–µ–Ω—å', xp: '–û–ø—ã—Ç', totalProfit: '–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç', lastTrade: '–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞', goods: '–¢–æ–≤–∞—Ä–æ–≤', caravans: '–ö–∞—Ä–∞–≤–∞–Ω—ã', camelsTotal: '–í—Å–µ–≥–æ –≤–µ—Ä–±–ª—é–¥–æ–≤', camelLimit: '–ª–∏–º–∏—Ç', day: '–î–µ–Ω—å', paused: '–ü–ê–£–ó–ê'
    },
    legend: { desert: '–ü—É—Å—Ç—ã–Ω—è', oasis: '–û–∞–∑–∏—Å', route: '–ú–∞—Ä—à—Ä—É—Ç', caravan: '–ö–∞—Ä–∞–≤–∞–Ω', inn: '–ò–Ω–Ω', bandits: '–ë–∞–Ω–¥–∏—Ç—ã' },
  tooltip: { price: '–¶–µ–Ω–∞', stock: '–ó–∞–ø–∞—Å—ã', netFlow: '–ß–∏—Å—Ç—ã–π –ø–æ—Ç–æ–∫', priceRangePct: '–¶–µ–Ω–∞ % –¥–∏–∞–ø–∞–∑–æ–Ω–∞', axes: '–û—Å—å X: –≤—Ä–µ–º—è (—á) / –û—Å—å Y: —Ü–µ–Ω–∞ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)' },
  time: { hoursShort: '—á', delta: 'Œî {hours}{unit}' },
    events: {
      stormLost: '–ü–µ—Å—á–∞–Ω–∞—è –±—É—Ä—è —É–Ω–∏—á—Ç–æ–∂–∏–ª–∞ {loss} –µ–¥. —Ç–æ–≤–∞—Ä–∞.',
      fair: '–°–ª—É—á–∞–π–Ω–∞—è —è—Ä–º–∞—Ä–∫–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ {bonus}.',
      camelLost: '–í–µ—Ä–±–ª—é–¥ –∫–∞—Ä–∞–≤–∞–Ω–∞ #{id} —É–±–µ–∂–∞–ª.',
      banditsSteal: '–ë–∞–Ω–¥–∏—Ç—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ —Å –ª–∞–≥–µ—Ä—è: —É–∫—Ä–∞–ª–∏ {loss}.',
      banditsFail: '–ë–∞–Ω–¥–∏—Ç—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –Ω–æ –∫–∞—Ä–∞–≤–∞–Ω—ã —É—à–ª–∏.'
    },
    welcome: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—É—Å—Ç—ã–Ω—é. –ù–∞—á–∏–Ω–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é.',
  build: {},
    trade: {
      sold: '–ö–∞—Ä–∞–≤–∞–Ω #{id} –ø—Ä–æ–¥–∞–ª {qty} {good} –≤ {city} –ø–æ {price} (–ø—Ä–æ—Ñ–∏—Ç {profit})',
      profit: '–ü—Ä–æ—Ñ–∏—Ç +{profit}',
      bought: '–ö–∞—Ä–∞–≤–∞–Ω #{id} –∫—É–ø–∏–ª {qty} {good} –≤ –≥–æ—Ä–æ–¥–µ {city} –ø–æ {price}',
      balance: '–ë–∞–ª–∞–Ω—Å {delta}',
      nothing: '–ö–∞—Ä–∞–≤–∞–Ω #{id} –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–∏–ª/–ø—Ä–æ–¥–∞–ª –≤ {city}'
    },
    level: {
      camelLimit: '–õ–∏–º–∏—Ç –≤–µ—Ä–±–ª—é–¥–æ–≤: {n}',
      caravanLimit: '–õ–∏–º–∏—Ç –∫–∞—Ä–∞–≤–∞–Ω–æ–≤: {n}',
      cityUnlocked: '–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥: {name}',
      goodUnlocked: '–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {name}',
      cityGrew1: '–ì–æ—Ä–æ–¥ –≤—ã—Ä–æ—Å.',
      cityGrew2: '–ì–æ—Ä–æ–¥–∞ —Ä–∞—Å—Ç—É—Ç.',
      cityGrowth: '–†–æ—Å—Ç –≥–æ—Ä–æ–¥–∞.',
      cityLarge: '–ö—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è.',
      newLevel: '–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!',
      up: '–£—Ä–æ–≤–µ–Ω—å {n}',
      cityGrewLog: '–ì–æ—Ä–æ–¥ {name} –≤—ã—Ä–æ—Å ({size}).'
    },
    roles: { PRODUCER:'–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', CONSUMER:'–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å', HUB:'–•–∞–±', SCARCE:'–î–µ—Ñ–∏—Ü–∏—Ç' },
  tips: 'Orbit Cam: –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –º—ã—à—å—é –≤—Ä–∞—â–∞–µ—Ç, –∫–æ–ª–µ—Å–æ –∑—É–º. W/S –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥, A/D –≤–±–æ–∫, —Å—Ç—Ä–µ–ª–∫–∏ –≤—Ä–∞—â/–Ω–∞–∫–ª–æ–Ω, Shift –±—ã—Å—Ç—Ä–µ–µ. P: –ø–∞—É–∑–∞.'
  }
};

export function t(key, vars){
  const segs = key.split('.');
  let cur = dict[currentLang];
  for(const s of segs){ if(cur && typeof cur === 'object' && s in cur) cur = cur[s]; else { cur = null; break; } }
  if(cur == null){ // fallback english
    cur = segs.reduce((o,s)=> (o&&o[s]!=null)? o[s]: null, dict.en);
  }
  if(typeof cur !== 'string') return key; // not found or nested object
  if(vars){ for(const k of Object.keys(vars)){ cur = cur.replace(new RegExp('\\{'+k+'\\}','g'), vars[k]); } }
  return cur;
}

export function applyGoodsNames(GOODS){
  for(const gid of Object.keys(GOODS)){
    if(dict[currentLang] && dict[currentLang].goods[gid]) GOODS[gid].name = dict[currentLang].goods[gid];
    else if(dict.en.goods[gid]) GOODS[gid].name = dict.en.goods[gid];
  }
}

export function roleLabel(role){ return t('roles.'+role); }

export function localizeStaticDOM(){
  const h1=document.querySelector('#mainMenu h1'); if(h1) h1.textContent=t('title');
  const build=document.getElementById('buildInn'); if(build) build.textContent=t('btn.buildInn');
  const sound=document.getElementById('toggleSound'); if(sound) sound.textContent=t('btn.mute');
  const citiesBtn=document.querySelector('#windowsMenu button[data-win="cities"]'); if(citiesBtn) citiesBtn.textContent=t('btn.cities');
  const stratBtn=document.querySelector('#windowsMenu button[data-win="strategy"]'); if(stratBtn) stratBtn.textContent=t('btn.strategy');
  const tips=document.getElementById('tips'); if(tips) tips.textContent=t('tips');
  const winCities=document.querySelector('#win-cities .titlebar span'); if(winCities) winCities.textContent=t('btn.cities');
  const winStrat=document.querySelector('#win-strategy .titlebar span'); if(winStrat) winStrat.textContent=t('btn.strategy');
  const stratHead=document.querySelector('#strategySection .section-head'); if(stratHead) stratHead.textContent=t('section.strategy');
  const carHead=document.querySelector('#caravansSection .section-head'); if(carHead) carHead.textContent=t('section.caravans');
}
